stages:
  - setup
  - test
  - deploy
  - release

setup:
  stage: setup
  image: alpine:latest
  script:
    - export CI_ARTIFACTS_URL=$(sed "s|$CI_PAGES_DOMAIN/|$CI_PAGES_DOMAIN/-/|" <(echo $CI_PAGES_URL))
    - env | sort
    - env | grep '^CI_ARTIFACTS_URL=' > .env
    - |
      export TOTAL_WORDS=0
      for FILE in Book/*/*.rst; do
        WORDS=$(wc -w $FILE | tr ' ' '\n' | head -n1)
        echo $FILE $WORDS | tee -a pre-metrics.txt
        TOTAL_WORDS=$(echo "$TOTAL_WORDS + $WORDS" | bc)
      done
      echo "Total_Words" "$TOTAL_WORDS" | tee metrics.txt
      cat pre-metrics.txt >> metrics.txt

  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  artifacts:
    reports:
      dotenv: .env
      metrics: metrics.txt
    expire_in: 1 hour

test:
  stage: test
  image: python:alpine
  needs:
    - setup
  script:
    - python -m pip install -r ./requirements.txt
    - sphinx-build -avTEW -b html . ./public
  # We're not saving this but it's here to look at just in case.
  artifacts:
    paths:
    - public
    expire_in: 1 day
  rules:
    - if: $CI_MERGE_REQUEST_ID
  environment:
    # Env for each MR
    name: MR/$CI_MERGE_REQUEST_IID
    url: ${CI_ARTIFACTS_URL}/-/jobs/$CI_JOB_ID/artifacts/public/index.html
    deployment_tier: development


branch:
  stage: test
  image: python:alpine
  needs:
    - setup
  script:
    - python -m pip install -r ./requirements.txt
    - sphinx-build -avTEW -b html . ./public
  # We're not saving this but it's here to look at just in case.
  artifacts:
    paths:
    - public
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: never
  environment:
    # Env for each MR
    name: $CI_COMMIT_REF_SLUG
    url: ${CI_ARTIFACTS_URL}/-/jobs/$CI_JOB_ID/artifacts/public/index.html
    deployment_tier: development

pages:
  stage: deploy
  image: python:alpine
  needs:
    - setup
  script:
    - python -m pip install -r ./requirements.txt
    - sphinx-build -avTEW -b html . ./public
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: main
    url: $CI_PAGES_URL
    deployment_tier: production

ebook:
  stage: deploy
  image: python:alpine
  script:
    - python -m pip install -r ./requirements.txt
    - sphinx-build -avTEW -d version=$CI_COMMIT_TAG -b epub . ./public
    - mv ./public/*.epub "./${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.epub"
  artifacts:
    paths:
      - "./${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.epub"
  rules:
    - if: $CI_COMMIT_TAG

package:
  stage: deploy
  image: alpine:latest
  needs:
    - job: ebook
      artifacts: true
  script:
    - apk add --no-cache curl
    - ls -lah
    - |
      curl \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file "./${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.epub" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$CI_PROJECT_NAME/${CI_COMMIT_TAG}/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.epub"
  rules:
    - if: $CI_COMMIT_TAG

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually
  script:
    - echo "Running the release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Version $CI_COMMIT_TAG'
    description: 'New ebook release'
    assets:
      links:
        - name: '$CI_PROJECT_NAME $CI_COMMIT_TAG.epub'
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$CI_PROJECT_NAME/${CI_COMMIT_TAG}/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.epub"
